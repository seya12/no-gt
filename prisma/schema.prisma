// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  exercises     Exercise[]
  workoutPlans  WorkoutPlan[]
  workoutSessions WorkoutSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutPlans WorkoutPlanExercise[]
  sets        Set[]

  @@unique([userId, name])
}

model WorkoutPlan {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises   WorkoutPlanExercise[]
  sessions    WorkoutSession[]
}

model WorkoutPlanExercise {
  id            String      @id @default(cuid())
  workoutPlanId String
  exerciseId    String
  defaultSets   Int
  defaultReps   Int
  startingWeight Float?
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  exercise      Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutPlanId, exerciseId])
}

model WorkoutSession {
  id          String   @id @default(cuid())
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startedAt   DateTime?
  completedAt DateTime?
  scheduled   Boolean  @default(false)
  userId      String
  workoutPlanId String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutPlan WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  sets        Set[]
}

model Set {
  id              String   @id @default(cuid())
  exerciseId      String
  workoutSessionId String
  targetReps      Int
  actualReps      Int?
  weight          Float
  notes           String?
  completed       Boolean  @default(false)
  nextWeightAdjustment String? // "increase", "decrease", or "keep"
  exercise        Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutSession  WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
}
